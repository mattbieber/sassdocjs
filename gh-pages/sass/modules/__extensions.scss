/* ==|=======================================================================
   modules.extensions
   ========================================================================== */




/* 
   properties necessary for responsive images
   @usage:
   @extend %m-image-responsive;
   ---------------------------------------------------------- */
%m-image-responsive {

  max-width:    100%;
  width:        100%;
  height:       auto;

}

/* 
   properties necessary for responsive images
   @usage:
   @extend %m-image-responsive;
   ---------------------------------------------------------- */
%m-aside-title {
  font: font-config(13px, 700);
  letter-spacing: 1px;
  margin: 18px 0px;
}

/* 
   properties necessary for responsive images
   @usage:
   @extend %m-image-responsive;
   ---------------------------------------------------------- */
%copy-text {

}

/* 
   properties for a naked UL
   @usage:
   @extend %swm-ul-navigation;
   ---------------------------------------------------------- */
%ul-navigation {
  @extend %clearfix;

  list-style-type:      none;
  list-style-position:  none;
  padding:              0;
  margin:               0;
}


/* 
   properties necessary for responsive images
   @usage:
   @extend %m-image-responsive;
   ---------------------------------------------------------- */
%ul-navigation-vertical {
  list-style-type:none;
  list-style-position: none;
  padding:0;
  float: none;
  margin:0;
  //overflow:hidden;
  //@extend %link-default;
}

/* 
   properties necessary for responsive images
   @usage:
   @extend %m-image-responsive;
   ---------------------------------------------------------- */
%m-blackbox {
  background-color: #000000;
  color: #ffffff;
  border-color:#000000;
}

/* 
   properties necessary for responsive images
   @usage:
   @extend %m-image-responsive;
   ---------------------------------------------------------- */
@mixin m-searchbox($text-width, $height) {
  //@extend %l-cleared-container;
  $outer-height: $height + 0.1em;
  margin:0;
  padding:0;
  height: emToPx($outer-height);
  width: 100%;
  
  input { 
    width: 100%; 
    height: 100%;
    //border: 1px $color-texgo-border solid;
    line-height: $outer-height;
  }

  li {
      margin: 0;
      display:inline-block;
      height: 90%;
      //float:left;
      &:first-child { width:$text-width; }
      &:last-child { 
        background-color: #000000; 
        line-height: $outer-height;
        padding: 0px 8px;
      }    
   }

   a { color: #ffffff; }
}
/* 
  mixin for creating horizontal or vertical list of items
  e.g. floated DIV or LI elemenents for navigation or grouping 

  @mixin     swm-list
  @param     $orientation {String} acceptable values are horizontal or vertical
  @param     $margin {Number} margin to apply to right (horizontal) or bottom (vertical)
  @param     $width {Number} optional width
  @param     $justified {Number} optional if supplied this should be the number of total elements
  @param     $use-float {Bool} use float vs. inline-block
  @param     $margin {Number} margin to apply to right (horizontal) or bottom (vertical)
  ---------------------------------------------------------- */
@function makeborder( $location
                    , $color: transparent
                    , $background-image: none) {

  @return $color $background-image repeat-x $location;
}


/* 
  mixin for creating horizontal or vertical list of items
  e.g. floated DIV or LI elemenents for navigation or grouping 

  @mixin     swm-list
  @param     $orientation {String} acceptable values are horizontal or vertical
  @param     $margin {Number} margin to apply to right (horizontal) or bottom (vertical)
  @param     $width {Number} optional width
  @param     $justified {Number} optional if supplied this should be the number of total elements
  @param     $use-float {Bool} use float vs. inline-block
  @param     $margin {Number} margin to apply to right (horizontal) or bottom (vertical)
  ---------------------------------------------------------- */
@mixin make-list(  $orientation
                , $margin: auto
                , $width: auto
                , $justified: 0
                , $use-float: false
                ) {

  list-style: none;
  @if $orientation == horizontal {
      @if $use-float == true { float:left; }
      width: $width;
      margin-right: $margin;
      display:inline-block;
      *display: inline;
      zoom: 1;
    

    &:first-child { text-align: left; 
					 @include at-size($m) { 
								 
					          }
    }
    &:last-child { margin-right:0px; }
  
  }
  
  @else {
    float:none;
    width: $width;
    margin-bottom: $margin;
    display:list-item;
    &:last-child { margin-bottom:0px; }

  }

  @if $justified > 0 {

    
    width:  percentage((100 / $justified) * 0.01); 
    margin: 0 auto; 
    

    &:first-child > * { float: left; margin: 0}
    &:last-child  > * { float: right; }
  }
}


/* 
  mixin for creating horizontal or vertical list of items
  e.g. floated DIV or LI elemenents for navigation or grouping 

  @mixin     swm-list
  @param     $orientation {String} acceptable values are horizontal or vertical
  @param     $margin {Number} margin to apply to right (horizontal) or bottom (vertical)
  @param     $width {Number} optional width
  @param     $justified {Number} optional if supplied this should be the number of total elements
  @param     $use-float {Bool} use float vs. inline-block
  @param     $margin {Number} margin to apply to right (horizontal) or bottom (vertical)
  ---------------------------------------------------------- */
@mixin swm-sprite($item-position:         0
                , $style-position:        0 
                , $image-file:    $default-sprite
                , $sprite-width:  $default-sprite-element-width
                , $sprite-height: $default-sprite-element-height
                ) {

  $pos-x: -1 * ($style-position * $sprite-width);
  $pos-y: -1 * ($item-position * $sprite-height);

  @debug $pos-x;
  @debug $pos-y;
  
  background: $image-file $pos-x $pos-y;


}



// -------- FORMS ------/* 


@mixin input-placeholder-color($color) {
  ::-webkit-input-placeholder { /* WebKit browsers */
    color:    $color;
  }
  :-moz-placeholder { /* Mozilla Firefox 4 to 18 */
    color:    $color;
  }
  ::-moz-placeholder { /* Mozilla Firefox 19+ */
    color:    $color;
  }
  :-ms-input-placeholder { /* Internet Explorer 10+ */
    color:    $color;
  }
}




%m-griditem-base {
    @extend %l-cleared-container;
    margin-right: 20px;
  
    float: left;
      
}